/*!
 * @pixi/filter-shockwave - v2.0.0
 * Compiled Wed, 02 Aug 2017 13:37:22 UTC
 *
 * pixi-filters is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var vertex="attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}",fragment="varying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\n\nuniform vec2 center;\nuniform vec3 params; // 10.0, 0.8, 0.1\nuniform float time;\n\nuniform vec4 filterArea;\nuniform vec4 filterClamp;\nuniform vec2 dimensions;\n\nvoid main()\n{\n    vec2 uv = vTextureCoord * filterArea.xy / dimensions.xy;\n    vec2 coord = uv;\n\n    float dist = distance(coord, center);\n\n    if ( (dist <= (time + params.z)) && (dist >= (time - params.z)) )\n    {\n        float diff = (dist - time);\n        float powDiff = 1.0 - pow(abs(diff*params.x), params.y);\n\n        float diffTime = diff  * powDiff;\n        vec2 diffUV = normalize(uv - center);\n        coord = uv + (diffUV * diffTime);\n    }\n\n    coord *= dimensions.xy / filterArea.xy;\n    vec2 clampedCoord = clamp(coord, filterClamp.xy, filterClamp.zw);\n    gl_FragColor = texture2D(uSampler, clampedCoord);\n    if (coord != clampedCoord) {\n        gl_FragColor *= max(0.0, 1.0 - length(coord - clampedCoord));\n    }\n}\n",ShockwaveFilter=function(e){function t(t,n,r){void 0===t&&(t=[.5,.5]),void 0===n&&(n=[10,.8,.1]),void 0===r&&(r=0),e.call(this,vertex,fragment,{center:{type:"v2",value:{x:.5,y:.5}},params:{type:"v3",value:{x:10,y:.8,z:.1}},time:{type:"1f",value:0},dimensions:{type:"2f",value:[0,0]}}),this.center=t,this.params=n,this.time=r}e&&(t.__proto__=e),(t.prototype=Object.create(e&&e.prototype)).constructor=t;var n={center:{},params:{},time:{}};return t.prototype.apply=function(e,t,n){this.uniforms.dimensions[0]=t.sourceFrame.width,this.uniforms.dimensions[1]=t.sourceFrame.height,e.applyFilter(this,t,n)},n.center.get=function(){return this.uniforms.center},n.center.set=function(e){this.uniforms.center=e},n.params.get=function(){return this.uniforms.params},n.params.set=function(e){this.uniforms.params=e},n.time.get=function(){return this.uniforms.time},n.time.set=function(e){this.uniforms.time=e},Object.defineProperties(t.prototype,n),t}(PIXI.Filter);export{ShockwaveFilter};
//# sourceMappingURL=filter-shockwave.es.min.js.map
